# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

workspace(name = "e2e_test_update_all_deps")

load(
    ":revisions.bzl",
    "DEBS_TARBALL",
    "GO_INSTALLER",
    "IMAGE",
    "RULES_K8S",
    "TEXT_FILE",
)

load(
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "http_archive",
    "http_file",
)

http_archive(
    name = "io_bazel_rules_docker",
    sha256 = "4521794f0fba2e20f3bf15846ab5e01d5332e587e9ce81629c7f96c793bb7036",
    strip_prefix = "rules_docker-0.14.4",
    urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.14.4/rules_docker-v0.14.4.tar.gz"],
)

load(
    "@io_bazel_rules_docker//repositories:repositories.bzl",
    container_repositories = "repositories",
)

container_repositories()

load("@io_bazel_rules_docker//repositories:deps.bzl", container_deps = "deps")

container_deps()

load("@io_bazel_rules_docker//repositories:pip_repositories.bzl", "pip_deps")

pip_deps()

load("@io_bazel_rules_docker//container:container.bzl", "container_pull")

container_pull(
    name = "ubuntu1604",
    registry = "gcr.io",
    repository = "gcp-runtimes/ubuntu_16_0_4",
    tag = "latest",
)

# This tests the DUS properly updating a GCR dependency pin. This target
# becomes valid (buildable) only after the DUS properly sets the pin specified
# in revisions.bzl
container_pull(
    name = "fus_managed_ubuntu1604",
    digest = IMAGE.sha256,
    registry = "gcr.io",
    repository = "gcp-runtimes/ubuntu_16_0_4",
)

# This tests the DUS properly updating a GCS dependency not managed by FUS.
# This target becomes valid (buildable) only after the DUS properly sets the
# pin specified in revisions.bzl
http_file(
    name = "go_release",
    downloaded_file_path = "go" + GO_INSTALLER.revision + ".linux-amd64.tar.gz",
    sha256 = GO_INSTALLER.sha256,
    urls = ["https://storage.googleapis.com/golang/go" + GO_INSTALLER.revision + ".linux-amd64.tar.gz"],
)

# This tests the DUS properly updating a GCS dependency of a generic file
# managed by FUS. This target becomes valid (buildable) only after the DUS
# properly sets the pin specified in revisions.bzl
http_file(
    name = "text_file",
    downloaded_file_path = "text_file.txt",
    sha256 = TEXT_FILE.sha256,
    urls = ["https://storage.googleapis.com/container_release_tools_e2e_tests/update_all_deps_test_copy/text_files/" + TEXT_FILE.revision + "_file.txt"],
)

# This tests the DUS properly updating a GCS dependency of a file supporting
# metadata generation and is managed by FUS. This target becomes valid
# (buildable) only after the DUS properly sets the pin specified in revisions.bzl
http_file(
    name = "basic_debs",
    downloaded_file_path = DEBS_TARBALL.revision + "_basic_debs.tar",
    sha256 = DEBS_TARBALL.sha256,
    urls = [
        "https://storage.googleapis.com/container_release_tools_e2e_tests/update_all_deps_test_copy/basic_debs/debs/" + DEBS_TARBALL.revision + "_basic_debs.tar",
    ],
)
